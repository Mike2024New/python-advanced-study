ВСТРОЕННЫЕ ФУНКЦИИ В PYTHON:

    lesson1 - генератор | что такое генератор?

    lesson2 - генератор | для чего нужны генераторы в python? Генераторы, как эффективный инструмент для обработки
    большого массива данных, экономя при этом память.

    lesson3 - map | встроенная функция map используется для применения функций к объектам находящимся внутри коллекции,
    что позволяет избежать создания дополнительных циклов и сделать код более лаконичным. По умолчанию возвращает
    генератор.

    lesson4 - filter | как и map функция filter используется для применения функций ко всем элементам коллекции, но её
    отличие в том, что применяемая к элементу функция должна возвращать либо true либо false и те объекты которые
    соответствуют условию в функции (true) будут сохраняться в коллекции. filter также как и map по умолчанию возвращает
    генератор. Если в качестве функции фильтра передать None, то в отфильтрованную коллекцию будут попадать не пустые
    значения.

    lesson5 - all и any | отвечают за проверку элементов коллекции, any проверяет, что-бы хотябы один элемент из
    коллекции соответствовал условию, а функция all проверяет, чтобы все элементы коллекции соответствовали заданному
    условию. Обе функции возвращают True/False. Эти функции стоит использовать именно с генераторами, так как нет
    смысла в данном случае использовать списковое включение.

    lesson6 - zip | объединяет между собой итерируемые объекты полученные например из разных источников, если
    последовательности одинаковой длины, то элементы будут упакованы поиндексно в кортежи, если перевести zip объект
    в list то получим список кортежей. Если списки будут разной длины, то zip будет пытаться вернуть коллекцию по
    размерам минимального списка, если нужно обойти это, то нужно использовать функцию zip_longest модуля itertools, он
    позволит заполнить пустые значения коллекции и выровнять их все по длине. zip объект также является итерируемым.

    lesson7 - enumerate | позволяет итерироваться по коллекции выводя значение и индекс. По сути это является
    альтернативой функции range при итерации по спискам. Отображаемые индексы можно смещать относительно стартовой
    позиции.


    # functools: reduce
    lesson8 - reduce | из модуля functools применяется для последовательного применения функции к элементам коллекции
    (например, списку) с целью свести его к одному значению. Это достигается путем применения функции к первым двум
    элементам, затем к результату и следующему элементу, и так далее. Если добавить третий аргумент в функцию reduce,
    то он будет работать как накопитель (аккумулятор значений предыдущих элементов).

    # functools: partial
    lesson9 - partial | это надстройка к функции, которая даёт возможность предустанавливать часть аргументов,
    создавая новую функцию, через которую можно будет вызвать исходную функцию с предустановленными аргументами.
    При этом основная функция также остаётся доступной. То есть это шаблон с предустановленными аргументами.

    lesson10 - замыкания | closures это функции которые позволяют сохранять свое окружение даже в тот момент когда они
    не используются. То есть переменные внутри декоратора как бы закрепляются за функцией, достигается это за счёт того,
    что внешняя функция возвращает объект функции а не вызов самой функции.
    То есть замыкание создаёт внутри себя некую самостоятельную область видимости, которая запоминает состояние
    переменных внутри себя.

    lesson11 - декораторы | обёртка функции, внешней функцией которая позволяет выполнять дополнительные действия перед
    (или после) срабатывания передаваемой в декоратор (обёртку) функции. По сути декоратор является модификацией
    переданной в него, без изменения кода передаваемой функции. Декораторов к функции может быть несколько, их порядок
    значения не имеет (если это не обусловлено логикой приложения).
    декоратор wraps модуля functools -> позволяет сохранить имя переданной функции (так как по умолчанию декораторы
    изменяют названия объектов генерируя новые имена).

    lesson12 - исключения | try/except/finally/else


    lesson13 - декораторы классы.


    ==================================== ПРАКТИКА ===================================================================
    repetition1 - повторение тем рассматриваемых в lesson1 - lesson9


    =================================== ВОПРОСЫ =====================================================================
    что такое хэш функция?