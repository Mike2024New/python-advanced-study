"""
Функция filter — это встроенная функция в Python, которая, как и map, позволяет применять функцию ко всем элементам
коллекции, но с другой целью: она фильтрует элементы на основе заданного условия.
Функция должна возвращать True или False, в зависимости от того, соответствует ли элемент условию.

Ключевые моменты:
    Условия: Условия можно определить как в отдельных функциях (с помощью def), так и в анонимных функциях (lambda).

    Возвращаемое значение: По умолчанию filter возвращает объект-генератор, который можно итерировать.

    Эффективность: Использование генераторов позволяет экономить память, так как в памяти в единицу времени находится
    только одно значение.

"""


def example1():
    """простейшее использование функции filter, элементы внутри коллекции проверяются на соответствие условию
    определенному в функции is_div_3"""

    def is_div_3(number: int) -> bool:
        return number % 3 == 0

    numbers = [1, 2, 3, 4]
    numbers_divide = list(filter(is_div_3, numbers))
    print(numbers_divide)


def example2():
    """
    решение аналогичное example1, но более оптимизированное с точки зрения памяти, в памяти в единицу времени находится
    только 1 значение (это достигается за счёт генераторов).
    В качестве фильтра используется lambda функция которая проверяет делимость элементов коллекции на заданное в div
    значение
    """
    numbers = (i for i in range(1, 100))  # использование генератора
    div = 2  # динамически изменяемое значение
    numbers_filter_div = filter(lambda x: x % div == 0, numbers)  # тоже возвращает генератор
    for num in numbers_filter_div:
        print(num)  # выполнить итерации по numbers_filter_div


def example3():
    """
    Также в функцию filter можно передать объект None, тогда функция возьмет из входной коллекции, только не пустые
    значения (которые не равны пустой строке, нулю, пустому списку и т.д.).
    """
    data = ['123', None, '', 'res', 0, '0', [], ['']]
    data_filter = filter(None, data)  # output : ['123', 'res', '0', ['']]
    for row in data_filter:
        print(row)


if __name__ == '__main__':
    example3()
