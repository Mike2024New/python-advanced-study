"""
функция zip - объединяет между собой итерируемые объекты полученные например из разных источников, если
последовательности одинаковой длины, то элементы будут упакованы поиндексно в кортежи, если перевести zip объект
в list то получим список кортежей. Если списки будут разной длины, то zip будет пытаться вернуть коллекцию по размерам
минимального списка, если нужно обойти это, то нужно использовать функцию zip_longest модуля itertools, он позволит
заполнить пустые значения коллекции и выровнять их все по длине.
zip объект также является итерируемым.
"""


def example1():
    """упаковка 3 коллекций одинаковой длины в список кортежей"""
    ids = [1, 2, 3]
    names = ['Ivan', 'Mike', 'Pavel']
    ages = [19, 25, 20]
    result = zip(ids, names, ages)  # вернется объект итератор zip
    for user in result:
        print(user)


def example2():
    """
    упаковка 3 коллекций разной длины в список кортежей, если коллекции не совпадают по длине
    то функция zip будет отталкиваться от самой короткой коллекции (в примере ниже в объекте zip будет всего 2 элемента
    так как коллекция names состоит всего из 2 элементов, а не 3 как все остальные).
    """
    ids = [1, 2, 3]
    names = ['Ivan', 'Mike', ]
    ages = [19, 25, 20]
    result = zip(ids, names, ages)  # вернется объект итератор zip
    for user in result:
        print(user)


def example3():
    """
    если нужно, чтобы коллекции были равномерной длины, то нужно использовать функцию zip_longest из модуля itertools
    это позволит установить значения по умолчанию
    """
    from itertools import zip_longest  # импорт функции zip_longest
    ids = [1, 2, 3]
    names = ['Ivan', 'Mike', ]  # эта коллекция снова отличилась
    ages = [19, 25, 20]
    result = zip_longest(ids, names, ages, fillvalue=None)  # вернется объект zip (fillvalue - заполнить пустые значен)
    for user in result:
        print(user)


def example4():
    """
    распаковка элементов из коллекции zip, для этого используется оператор *
    это обратная операция упаковке элементов в список кортежей.
    """
    ids = [1, 2, 3]
    names = ['Ivan', 'Mike', 'Pavel']
    ages = [19, 25, 20]
    result = zip(ids, names, ages)  # вернется объект итератор zip
    ids, names, result = zip(*result)
    print(ids)
    print(names)
    print(result)


def example5():
    """еще один пример распаковки списка кортежей"""
    rgb = [('red', 155), ('green', 200), ('blue', 50)]
    names, values = zip(*rgb)
    print(names)
    print(values)


if __name__ == '__main__':
    example5()
