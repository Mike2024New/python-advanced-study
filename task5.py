"""
–ó–∞–¥–∞—á–∞ –æ—Ç Perplexity
–Ω–∞–π—Ç–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ —ç–ª–µ–º–µ–Ω—Ç, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ
–§–ª–∞–≥ reverse –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–¥–∞–ª–∏—Ç—å –≤—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ
–Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ, –≤–æ—Ç –ø—Ä–∏–º–µ—Ä:
[3,4,6,7,1] (—Å reverse=False) -> –≤—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ 6
[3,4,6,7,1] (—Å reverse=True) -> –≤—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ 3
---------------------------------------------------
–†–µ—à–µ–Ω–∏–µ:
1) –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∞—Ä–≥—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä [3,2,4,5]) —É–¥–∞–ª–∏—Ç—å 5, –æ—Å—Ç–∞—ë—Ç—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏—è [3,2,4]
2) –≤–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∞—Ä–≥—É–º–µ–Ω—Ç –∏–∑ –æ—Å—Ç–∞–≤—à–µ–π—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ [3,2,4] -> 4
==> –≤—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∞—Ä–≥—É–º–µ–Ω—Ç 5
---------------------------------------------------
–¥–≤–∞ –ø–ª—é—Å –¥–≤–∞ —Ä–∞–≤–Ω–æ —Ç—Ä–∏ –±—É–¥–µ—Ç —á–µ—Ç—ã—Ä–µ (—à—É—Ç–∫–∞üôÇ)
"""


def second_largest(collection: list | set | tuple, reverse=False):
    def second_largest_number(input_list: list | set | tuple) -> int:
        """
        –ø–æ–∏—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        :param input_list: –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è
        :return: int
        """
        del_arg = min(input_list) if reverse else max(input_list)  # –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        input_list.remove(del_arg)  # —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        return min(input_list) if reverse else max(input_list)  # –≤–µ—Ä–Ω—É—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç

    def second_largest_letter(input_list: list | set | tuple) -> str:
        """
        –ø–æ–∏—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        :param input_list: –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è
        :return: str
        """
        input_list = [ord(i) for i in set(input_list)]
        del_arg = min(input_list) if reverse else max(input_list)
        input_list.remove(del_arg)
        return chr(min(input_list)) if reverse else chr(max(input_list))

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    if not isinstance(collection, (list, tuple, set)):
        raise TypeError("–ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ list, tuple, set")

    collection = set(collection)  # –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    # –º–µ–Ω–µ–µ 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤–µ—Ä–Ω—É—Ç—å None
    if len(collection) < 2:
        return None
    # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–±—É–∫–≤—ã –∏–ª–∏ —á–∏—Å–ª–∞)
    if all(isinstance(element, int) for element in collection):
        return second_largest_number(input_list=collection)
    if all(isinstance(element, str) for element in collection):
        return second_largest_letter(input_list=collection)


if __name__ == '__main__':
    print(second_largest(collection=[4, 3, 2, 10, 4, 5, 8]))  # output: 8
    # print(second_largest(collection=[4, 3, 2, 10, 4, 5, 8], reverse=True))  # output 3
    # print(second_largest(collection=['q', 'w', 'f', 'a', 'b', 'd', 'e']))  # output q
    # print(second_largest(collection=['q', 'w', 'f', 'a', 'b', 'd', 'e'], reverse=True))  # output b
    # print(second_largest(collection=[3, 1]))  # output 1
    # print(second_largest(collection=[3, 1], reverse=True))  # output 3
    # print(second_largest(collection=[5, 5, 5]))  # output None
    # print(second_largest(collection=[5]))  # output None
    # print(second_largest(collection=[]))  # output None
    # print(second_largest(collection=2))  # TypeError
